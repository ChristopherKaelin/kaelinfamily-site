---
import BaseLayout from "../../layouts/BaseLayout.astro";
import PostList from "../../components/PostList.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { sanityClient } from "../../../sanity.config.js";
import TrackedPostLink from "../../components/TrackedPostLink.astro";

export async function getStaticPaths() {
  const categories: any[] = await sanityClient.fetch(`
    *[_type == "category"] {
      title,
      "slug": slug.current,
      description
    }
  `);

  return categories.map((category) => ({
    params: { slug: category.slug },
    props: {
      categoryTitle: category.title,
      categorySlug: category.slug,
      categoryDescription: category.description,
    },
  }));
}

const { categoryTitle, categorySlug, categoryDescription } = Astro.props;

const posts: any[] = await sanityClient.fetch(`
  *[_type == "post" && (
    references(*[_type == "category" && slug.current == "${categorySlug}"]._id) ||
    references(*[_type == "category" && parent->slug.current == "${categorySlug}"]._id)
  )] | order(publishedAt desc) {
    _id,
    title,
    slug,
    publishedAt,
    "imageUrl": mainImage.asset->url,
    "categories": categories[]->{title, "slug": slug.current},
    "excerpt": array::join(string::split(pt::text(body), "")[0..150], "") + "..."
  }
`);
---

<BaseLayout
  title={`${categoryTitle} - ${SITE_TITLE}`}
  description={SITE_DESCRIPTION}
>
  <div class="category-header">
    <h1>{categoryTitle}</h1>
    {
      categoryDescription && (
        <p class="category-description">{categoryDescription}</p>
      )
    }
    <div class="category-stats">
      {posts.length}
      {posts.length === 1 ? "post" : "posts"}
    </div>
  </div>

  {
    posts.length > 0 ? (
      <section>
        <div class="controls-container">
          <div class="view-controls">
            <div class="view-toggle">
              <span class="label">View: </span>
              <a href={`?view=grid`} class='view-button active'>
                <svg width="16" height="16" viewBox="0 0 16 16">
                  <rect width="6" height="6" x="1" y="1" fill="currentColor"/>
                  <rect width="6" height="6" x="9" y="1" fill="currentColor"/>
                  <rect width="6" height="6" x="1" y="9" fill="currentColor"/>
                  <rect width="6" height="6" x="9" y="9" fill="currentColor"/>
                </svg>
                Grid
              </a> &nbsp;
              <a href={`?view=list`} class='view-button'>
                <svg width="16" height="16" viewBox="0 0 16 16">
                  <rect width="14" height="2" x="1" y="3" fill="currentColor"/>
                  <rect width="14" height="2" x="1" y="7" fill="currentColor"/>
                  <rect width="14" height="2" x="1" y="11" fill="currentColor"/>
                </svg>
                List
              </a>
            </div>
          </div>
          <div class="sort-controls">
            <div class="sort-toggle">
              <span class="label">Sort:</span>
              <a href="?sort=newest" class="sort-button" data-sort="newest">
                Newest
              </a>
              <a href="?sort=oldest" class="sort-button" data-sort="oldest">
                Oldest
              </a>
            </div>
          </div>
        </div>
        <PostList posts={posts} variant='list' />
      </section>
    ) : (
      <div class="no-posts">
        <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" >
          <circle cx="11" cy="11" r="8" />
          <path d="m21 21-4.35-4.35" />
        </svg>
        <h2>No posts found</h2>
        <p>There are no posts in this category yet. Check back later!</p>
        <a href="/blog" class="back-to-blog">
          ‚Üê Back to all posts
        </a>
      </div>
    )
  }
</BaseLayout>

<script>
  // Get view mode from URL or default to grid
  const urlParams = new URLSearchParams(window.location.search);
  const viewMode = urlParams.get('view') || 'grid';
  const sortMode = urlParams.get('sort') || 'newest';
  
  // Apply the view mode to the post list
  const postList = document.querySelector('.post-list');
  if (postList) {
    postList.className = `post-list ${viewMode}`;
  }

  // Update view button active states
  document.querySelectorAll('.view-button').forEach(button => {
    const isActive = button.getAttribute('href')?.includes(`view=${viewMode}`);
    button.classList.toggle('active', isActive);
  });

  // Update sort button hrefs and active states
  document.querySelectorAll('.sort-button').forEach(button => {
    const sort = button.getAttribute('data-sort') || 'newest';
    const params = new URLSearchParams();
    if (viewMode !== 'grid') params.set('view', viewMode);
    params.set('sort', sort);
    button.setAttribute('href', '?' + params.toString());

    button.classList.toggle('active', sort === sortMode);
  });

  // Sort posts
  if (postList && sortMode === 'oldest') {
    const articles = Array.from(postList.querySelectorAll('.post-item'));
    const sortedArticles = articles.sort((a, b) => {
      const dateA = new Date(a.querySelector('.post-date time')?.getAttribute('datetime') || '');
      const dateB = new Date(b.querySelector('.post-date time')?.getAttribute('datetime') || '');
      return dateA.getTime() - dateB.getTime(); // oldest first
    });
    
    // Re-append in sorted order
    sortedArticles.forEach(article => postList.appendChild(article));
  }
</script>

<style>
  .category-header {
    text-align: center;
    margin-bottom: var(--spacing-xl);
    padding-bottom: var(--spacing-large);
    border-bottom: 2px solid var(--color-border);
  }

  .category-header h1 {
    font-size: var(--font-size-xxl);
    color: var(--color-primary);
    margin-bottom: var(--spacing-base);
  }

  .category-description {
    font-size: var(--font-size-large);
    color: var(--color-muted);
    margin-bottom: var(--spacing-base);
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .category-stats {
    color: var(--color-accent);
    font-weight: 500;
  }

  .no-posts {
    text-align: center;
    padding: var(--spacing-xl) 0;
    color: var(--color-muted);
  }

  .no-posts svg {
    margin-bottom: var(--spacing-base);
    opacity: 0.5;
  }

  .no-posts h2 {
    color: var(--color-primary);
    margin-bottom: var(--spacing-base);
  }

  .back-to-blog {
    display: inline-block;
    margin-top: var(--spacing-large);
    padding: 0.75rem 1.5rem;
    background: var(--color-accent);
    color: white;
    text-decoration: none;
    border-radius: var(--border-radius-base);
    font-weight: 500;
    transition: var(--transition-fast);
  }

  .back-to-blog:hover {
    background: var(--color-primary);
    transform: translateY(-2px);
  }

	.active {
		font-weight: bolder;
		text-decoration: none;
	}

  .controls-container {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    margin-bottom: var(--spacing-large);
    flex-wrap: wrap;
    gap: var(--spacing-base);
  }
  
  .controls-container .label {
    font-size: x-large;
    font-weight: 600;
    margin-right: 0.5rem;
  }

  .view-button,
  .sort-button {
    margin-left: 0.5rem;
    padding: .25rem .5rem;
    border-radius: var(--border-radius-base);
  }

  .view-button.active,
  .sort-button.active {
    color: var(--color-bright);
    background-color: var(--color-success-light);
  }
</style>
